#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser.rb : generated by racc
  
module Cadenza
  class Parser < Racc::Parser

module_eval(<<'...end cadenza.y/module_eval...', 'cadenza.y', 110)
attr_reader :lexer, :container_name

def initialize(options={})
  @lexer = options.fetch(:lexer, Cadenza::Lexer.new)

  raise "Lexers passed to the parser must define next_token" unless @lexer.respond_to?(:next_token)

  raise "Lexers passed to the parser must define source=" unless @lexer.respond_to?(:source=)
end

def parse(source)
  @lexer.source = source

  @stack = [DocumentNode.new]

  do_parse

  @stack.first
end

def push_child(node)
  @stack.last.children.push(node)
end

def next_token
  @lexer.next_token
end
...end cadenza.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    30,    31,    32,    33,    34,    35,    10,    10,     3,    75,
    10,    12,     3,    42,    67,    13,     8,     8,    52,    10,
     8,     3,    10,    10,    77,     3,    12,    25,    78,     8,
    13,    66,     8,     8,    30,    31,    32,    33,    34,    35,
    73,    10,    36,     3,    29,    10,    65,    28,    64,    63,
    12,     8,    59,    61,    13,     8,    79,    30,    31,    32,
    33,    34,    35,    30,    31,    32,    33,    34,    35,    30,
    31,    32,    33,    34,    35,    17,    19,    21,    23,    24,
    17,    19,    21,    23,    24,    12,    60,    44,    45,    13,
    17,    19,    21,    23,    24,    17,    19,    21,    23,    24,
    17,    19,    21,    23,    24,    17,    19,    21,    23,    24,
    17,    19,    21,    23,    24,    17,    19,    21,    23,    24,
    17,    19,    21,    23,    24,    17,    19,    21,    23,    24,
    17,    19,    21,    23,    24,    17,    19,    21,    23,    24,
    17,    19,    21,    23,    24,    17,    19,    21,    23,    24,
    17,    19,    21,    23,    24,    40,    39,    40,    39,    40,
    39,    40,    39,    40,    39,    40,    39,    37,    38,    37,
    38,    37,    38,    40,    39,    11,    52,    43,    27,    80,
    81 ]

racc_action_check = [
    26,    26,    26,    26,    26,    26,    71,    72,    71,    72,
     4,     3,     4,    26,    62,     3,    71,    72,    65,     9,
     4,     9,    74,    67,    74,    67,    75,    11,    75,     9,
    75,    60,    74,    67,    18,    18,    18,    18,    18,    18,
    69,     0,    18,     0,    18,    15,    54,    15,    54,    52,
    77,     0,    41,    44,    77,    15,    77,    41,    41,    41,
    41,    41,    41,    76,    76,    76,    76,    76,    76,    68,
    68,    68,    68,    68,    68,    34,    34,    34,    34,    34,
    10,    10,    10,    10,    10,    28,    43,    28,    28,    28,
    30,    30,    30,    30,    30,    31,    31,    31,    31,    31,
    32,    32,    32,    32,    32,    33,    33,    33,    33,    33,
    24,    24,    24,    24,    24,    35,    35,    35,    35,    35,
    37,    37,    37,    37,    37,    38,    38,    38,    38,    38,
    63,    63,    63,    63,    63,    40,    40,    40,    40,    40,
    12,    12,    12,    12,    12,    73,    73,    73,    73,    73,
    39,    39,    39,    39,    39,    22,    22,    46,    46,    50,
    50,    51,    51,    48,    48,    47,    47,    57,    57,    58,
    58,    20,    20,    49,    49,     2,    36,    27,    13,    78,
    79 ]

racc_action_pointer = [
    20,   nil,   175,   -13,   -11,   nil,   nil,   nil,   nil,    -2,
    78,    27,   138,   176,   nil,    24,   nil,   nil,    22,   nil,
   163,   nil,   145,   nil,   108,   nil,   -12,   148,    61,   nil,
    88,    93,    98,   103,    73,   113,   174,   118,   123,   148,
   133,    45,   nil,    84,    28,   nil,   147,   155,   153,   163,
   149,   151,    30,   nil,    26,   nil,   nil,   159,   161,   nil,
     6,   nil,   -11,   128,   nil,    16,   nil,     2,    57,    22,
   nil,   -15,   -14,   143,     1,     2,    51,    26,   154,   155,
   nil,   nil ]

racc_action_default = [
    -2,   -37,   -41,   -41,    -1,   -38,   -39,   -36,   -35,   -41,
   -41,   -41,   -41,   -41,   -40,   -41,    -8,    -3,   -41,    -4,
   -11,    -5,   -14,    -6,   -41,    82,   -41,   -41,   -41,   -27,
   -41,   -41,   -41,   -41,   -41,   -41,   -41,   -41,   -41,   -41,
   -41,   -41,   -29,   -41,   -41,   -31,   -15,   -16,   -17,   -18,
   -19,   -20,   -23,   -25,   -41,    -9,   -10,   -13,   -12,    -7,
   -41,   -30,   -41,   -41,   -28,   -41,   -33,   -41,   -21,   -24,
   -26,   -41,   -41,   -41,   -41,   -41,   -22,   -41,   -41,   -41,
   -32,   -34 ]

racc_goto_table = [
     4,    18,    14,    26,    53,    57,    58,    55,    56,    15,
    69,    54,    62,    14,    71,    41,    46,    47,    48,    49,
    50,    51,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    70,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    68,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    76,   nil,   nil,    72,   nil,   nil,
    14,    74,    14 ]

racc_goto_check = [
     2,     4,    16,     4,     8,     5,     5,     3,     3,     2,
     7,     9,    13,    16,    15,     4,     6,     6,     6,     6,
     6,     6,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,     2,   nil,   nil,
    16,     2,    16 ]

racc_goto_pointer = [
   nil,    22,     0,   -30,    -9,   -34,   -14,   -53,   -32,   -25,
   nil,   nil,   nil,   -33,   nil,   -52,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,    16,   nil,    20,    22,   nil,   nil,   nil,
     7,     9,     1,   nil,     5,   nil,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 33, :_reduce_none,
  0, 33, :_reduce_2,
  1, 35, :_reduce_3,
  1, 35, :_reduce_4,
  1, 35, :_reduce_5,
  1, 35, :_reduce_6,
  3, 35, :_reduce_7,
  1, 37, :_reduce_none,
  3, 37, :_reduce_9,
  3, 37, :_reduce_10,
  1, 38, :_reduce_none,
  3, 38, :_reduce_12,
  3, 38, :_reduce_13,
  1, 36, :_reduce_none,
  3, 36, :_reduce_15,
  3, 36, :_reduce_16,
  3, 36, :_reduce_17,
  3, 36, :_reduce_18,
  3, 36, :_reduce_19,
  3, 36, :_reduce_20,
  1, 39, :_reduce_21,
  3, 39, :_reduce_22,
  1, 40, :_reduce_23,
  3, 40, :_reduce_24,
  1, 41, :_reduce_25,
  3, 41, :_reduce_26,
  3, 42, :_reduce_27,
  5, 42, :_reduce_28,
  4, 43, :_reduce_29,
  5, 44, :_reduce_30,
  0, 45, :_reduce_31,
  10, 44, :_reduce_32,
  0, 47, :_reduce_33,
  11, 46, :_reduce_34,
  1, 48, :_reduce_35,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 34, :_reduce_39,
  2, 34, :_reduce_40 ]

racc_reduce_n = 41

racc_shift_n = 82

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :INTEGER => 3,
  :REAL => 4,
  :STRING => 5,
  "(" => 6,
  ")" => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  :OP_EQ => 12,
  :OP_NEQ => 13,
  :OP_LEQ => 14,
  :OP_GEQ => 15,
  ">" => 16,
  "<" => 17,
  "," => 18,
  ":" => 19,
  "|" => 20,
  :VAR_OPEN => 21,
  :VAR_CLOSE => 22,
  :STMT_OPEN => 23,
  :IF => 24,
  :STMT_CLOSE => 25,
  :ENDIF => 26,
  :ELSE => 27,
  :FOR => 28,
  :IN => 29,
  :ENDFOR => 30,
  :TEXT_BLOCK => 31 }

racc_nt_base = 32

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "INTEGER",
  "REAL",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "OP_EQ",
  "OP_NEQ",
  "OP_LEQ",
  "OP_GEQ",
  "\">\"",
  "\"<\"",
  "\",\"",
  "\":\"",
  "\"|\"",
  "VAR_OPEN",
  "VAR_CLOSE",
  "STMT_OPEN",
  "IF",
  "STMT_CLOSE",
  "ENDIF",
  "ELSE",
  "FOR",
  "IN",
  "ENDFOR",
  "TEXT_BLOCK",
  "$start",
  "target",
  "document",
  "primary_expression",
  "boolean_expression",
  "multiplicative_expression",
  "additive_expression",
  "parameter_list",
  "filter",
  "filter_list",
  "inject_statement",
  "if_statement",
  "if_block",
  "@1",
  "for_block",
  "@2",
  "document_component" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cadenza.y', 5)
  def _reduce_2(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 9)
  def _reduce_3(val, _values, result)
     result = VariableNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 10)
  def _reduce_4(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 11)
  def _reduce_5(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 12)
  def _reduce_6(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 13)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'cadenza.y', 18)
  def _reduce_9(val, _values, result)
     result = ArithmeticNode.new(val[0], "*", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 19)
  def _reduce_10(val, _values, result)
     result = ArithmeticNode.new(val[0], "/", val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'cadenza.y', 24)
  def _reduce_12(val, _values, result)
     result = ArithmeticNode.new(val[0], "+", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 25)
  def _reduce_13(val, _values, result)
     result = ArithmeticNode.new(val[0], "-", val[2]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'cadenza.y', 30)
  def _reduce_15(val, _values, result)
     result = BooleanNode.new(val[0], "==", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 31)
  def _reduce_16(val, _values, result)
     result = BooleanNode.new(val[0], "!=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 32)
  def _reduce_17(val, _values, result)
     result = BooleanNode.new(val[0], "<=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 33)
  def _reduce_18(val, _values, result)
     result = BooleanNode.new(val[0], ">=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 34)
  def _reduce_19(val, _values, result)
     result = BooleanNode.new(val[0], ">", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 35)
  def _reduce_20(val, _values, result)
     result = BooleanNode.new(val[0], "<", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 39)
  def _reduce_21(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 40)
  def _reduce_22(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 44)
  def _reduce_23(val, _values, result)
     result = FilterNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 45)
  def _reduce_24(val, _values, result)
     result = FilterNode.new(val[0].value, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 49)
  def _reduce_25(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 50)
  def _reduce_26(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 54)
  def _reduce_27(val, _values, result)
     result = InjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 55)
  def _reduce_28(val, _values, result)
     result = InjectNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 61)
  def _reduce_29(val, _values, result)
            @stack.push DocumentNode.new
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 69)
  def _reduce_30(val, _values, result)
            result = IfNode.new(val[0], @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 72)
  def _reduce_31(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 75)
  def _reduce_32(val, _values, result)
            false_children, true_children = @stack.pop.children, @stack.pop.children
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 82)
  def _reduce_33(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 86)
  def _reduce_34(val, _values, result)
            iterator = VariableNode.new(val[2].value)
        iterable = VariableNode.new(val[4].value)
        
        result = ForNode.new(iterator, iterable, @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 94)
  def _reduce_35(val, _values, result)
     result = TextNode.new(val[0].value) 
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'cadenza.y', 101)
  def _reduce_39(val, _values, result)
     push_child val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 102)
  def _reduce_40(val, _values, result)
     push_child val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Cadenza
