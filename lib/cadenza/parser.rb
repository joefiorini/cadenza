#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser.rb : generated by racc
  
module Cadenza
  class Parser < Racc::Parser

module_eval(<<'...end cadenza.y/module_eval...', 'cadenza.y', 41)
attr_reader :lexer

def initialize(options={})
  @lexer = options.fetch(:lexer, Cadenza::Lexer.new)

  raise "Lexers passed to the parser must define next_token" unless @lexer.respond_to?(:next_token)

  raise "Lexers passed to the parser must define source=" unless @lexer.respond_to?(:source=)
end

def parse(source)
  @lexer.source = source
  @document = DocumentNode.new
  do_parse
  @document
end

def next_token
  @lexer.next_token
end
...end cadenza.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    21,    18,    19,    17,    15,     5,     6,     7,     8,    10,
     5,     6,     7,     8,    10,     5,     6,     7,     8,    10,
     5,     6,     7,     8,    10,     5,     6,     7,     8,    10,
     5,     6,     7,     8,    10,    17,    15,    20,    16,    18,
    19,    18,    19,    13,     1 ]

racc_action_check = [
    14,    22,    22,    14,    14,     1,     1,     1,     1,     1,
    15,    15,    15,    15,    15,    10,    10,    10,    10,    10,
    18,    18,    18,    18,    18,    19,    19,    19,    19,    19,
    17,    17,    17,    17,    17,    11,    11,    13,    11,    12,
    12,    23,    23,     2,     0 ]

racc_action_pointer = [
    32,     3,    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    13,    25,    31,    37,    -7,     8,   nil,    28,    18,    23,
   nil,   nil,    -7,    33,   nil,   nil ]

racc_action_default = [
    -2,   -16,   -16,    -1,   -15,    -3,    -4,    -5,    -6,    -8,
   -16,   -16,   -11,   -16,   -16,   -16,   -14,   -16,   -16,   -16,
    26,    -7,   -13,   -12,    -9,   -10 ]

racc_goto_table = [
    11,    22,     2,    23,    24,    25,     3,     4,   nil,    14 ]

racc_goto_check = [
     4,     5,     1,     5,     3,     3,     2,     6,   nil,     4 ]

racc_goto_pointer = [
   nil,     2,     6,   -14,    -1,   -14,     7 ]

racc_goto_default = [
   nil,   nil,   nil,     9,   nil,    12,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_none,
  0, 15, :_reduce_2,
  1, 17, :_reduce_3,
  1, 17, :_reduce_4,
  1, 17, :_reduce_5,
  1, 17, :_reduce_6,
  3, 17, :_reduce_7,
  1, 19, :_reduce_none,
  3, 19, :_reduce_9,
  3, 19, :_reduce_10,
  1, 18, :_reduce_none,
  3, 18, :_reduce_12,
  3, 18, :_reduce_13,
  3, 20, :_reduce_14,
  1, 16, :_reduce_15 ]

racc_reduce_n = 16

racc_shift_n = 26

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :INTEGER => 3,
  :REAL => 4,
  :STRING => 5,
  "(" => 6,
  ")" => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  :VAR_OPEN => 12,
  :VAR_CLOSE => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "INTEGER",
  "REAL",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "VAR_OPEN",
  "VAR_CLOSE",
  "$start",
  "target",
  "document",
  "primary_expression",
  "additive_expression",
  "multiplicative_expression",
  "inject_statement" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cadenza.y', 5)
  def _reduce_2(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 9)
  def _reduce_3(val, _values, result)
     result = VariableNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 10)
  def _reduce_4(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 11)
  def _reduce_5(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 12)
  def _reduce_6(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 13)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'cadenza.y', 18)
  def _reduce_9(val, _values, result)
     result = ArithmeticNode.new(val[0], "*", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 19)
  def _reduce_10(val, _values, result)
     result = ArithmeticNode.new(val[0], "/", val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'cadenza.y', 24)
  def _reduce_12(val, _values, result)
     result = ArithmeticNode.new(val[0], "+", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 25)
  def _reduce_13(val, _values, result)
     result = ArithmeticNode.new(val[0], "-", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 29)
  def _reduce_14(val, _values, result)
     result = InjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 33)
  def _reduce_15(val, _values, result)
     @document.children.push(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Cadenza
