#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser.rb : generated by racc
  
module Cadenza
  class Parser < Racc::Parser

module_eval(<<'...end cadenza.y/module_eval...', 'cadenza.y', 126)
attr_reader :lexer, :container_name

def initialize(options={})
  @lexer = options.fetch(:lexer, Cadenza::Lexer.new)

  raise "Lexers passed to the parser must define next_token" unless @lexer.respond_to?(:next_token)

  raise "Lexers passed to the parser must define source=" unless @lexer.respond_to?(:source=)
end

def parse(source)
  @lexer.source = source

  @stack = [DocumentNode.new]

  do_parse

  @stack.first
end

def push_child(node)
  @stack.last.children.push(node)
end

def next_token
  @lexer.next_token
end
...end cadenza.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    12,     3,    85,    12,    12,     3,     3,    12,    12,
     3,    35,    30,     2,     2,    31,    64,     2,     2,    49,
    48,     2,     2,    12,    80,     3,    38,    39,    40,    41,
    42,    43,    12,    12,    90,    92,     2,    78,    12,    52,
     3,    76,    77,    75,    73,     2,     2,    66,    49,    48,
    71,     2,    38,    39,    40,    41,    42,    43,    38,    39,
    40,    41,    42,    43,    64,    14,    44,    94,    37,    15,
    87,    14,    16,    54,    13,    15,    53,    14,    16,    89,
    13,    15,    51,    95,    16,    14,    13,    49,    48,    15,
    49,    48,    16,    14,    13,    55,    56,    15,    49,    48,
    16,    50,    13,    38,    39,    40,    41,    42,    43,    38,
    39,    40,    41,    42,    43,    21,    22,    23,    25,    27,
    21,    22,    23,    25,    27,    21,    22,    23,    25,    27,
    21,    22,    23,    25,    27,    21,    22,    23,    25,    27,
    21,    22,    23,    25,    27,    21,    22,    23,    25,    27,
    21,    22,    23,    25,    27,    21,    22,    23,    25,    27,
    21,    22,    23,    25,    27,    21,    22,    23,    25,    27,
    21,    22,    23,    25,    27,    21,    22,    23,    25,    27,
    21,    22,    23,    25,    27,    21,    22,    23,    25,    27,
    49,    48,    49,    48,    46,    47,    46,    47,    46,    47,
    36,    93,    34,    33,    18,    96,    97 ]

racc_action_check = [
     0,    79,     0,    79,     4,    80,     4,    80,     7,    17,
     7,    17,    13,     0,    79,    13,    76,     4,    80,    62,
    62,     7,    17,    84,    74,    84,    32,    32,    32,    32,
    32,    32,    86,    88,    86,    88,    84,    71,    72,    32,
    72,    63,    64,    63,    55,    86,    88,    45,    59,    59,
    53,    72,    45,    45,    45,    45,    45,    45,    26,    26,
    26,    26,    26,    26,    44,    90,    26,    90,    26,    90,
    83,    85,    90,    34,    90,    85,    33,    92,    85,    85,
    85,    92,    31,    92,    92,     3,    92,    60,    60,     3,
    61,    61,     3,    35,     3,    35,    35,    35,    58,    58,
    35,    30,    35,    82,    82,    82,    82,    82,    82,    91,
    91,    91,    91,    91,    91,    40,    40,    40,    40,    40,
    39,    39,    39,    39,    39,    38,    38,    38,    38,    38,
    12,    12,    12,    12,    12,    14,    14,    14,    14,    14,
    41,    41,    41,    41,    41,    42,    42,    42,    42,    42,
    43,    43,    43,    43,    43,    87,    87,    87,    87,    87,
    27,    27,    27,    27,    27,    77,    77,    77,    77,    77,
    47,    47,    47,    47,    47,    48,    48,    48,    48,    48,
    49,    49,    49,    49,    49,    46,    46,    46,    46,    46,
    57,    57,    29,    29,    69,    69,    70,    70,    28,    28,
    18,    89,    16,    15,     6,    94,    95 ]

racc_action_pointer = [
   -21,   nil,   nil,    61,   -17,   nil,   204,   -13,   nil,   nil,
   nil,   nil,   128,    10,   133,   201,   200,   -12,   200,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    46,   158,   190,   182,
    76,    57,    14,    47,    48,    69,   nil,   nil,   123,   118,
   113,   138,   143,   148,    62,    40,   183,   168,   173,   178,
   nil,   nil,   nil,    48,   nil,    19,   nil,   180,    88,    38,
    77,    80,     9,    21,    23,   nil,   nil,   nil,   nil,   186,
   188,    12,    17,   nil,    -1,   nil,    14,   163,   nil,   -20,
   -16,   nil,    91,    52,     2,    47,    11,   153,    12,   176,
    41,    97,    53,   nil,   180,   181,   nil,   nil ]

racc_action_default = [
    -2,   -40,   -39,   -48,   -48,   -41,   -48,    -1,   -42,   -43,
   -46,   -44,   -48,   -48,   -48,   -48,   -48,   -48,   -48,   -47,
   -45,    -3,    -4,    -5,    -8,    -6,   -48,   -48,   -11,   -14,
   -48,   -48,   -48,   -48,   -48,   -48,    98,   -27,   -48,   -48,
   -48,   -48,   -48,   -48,   -48,   -48,   -48,   -48,   -48,   -48,
   -38,   -37,   -29,   -48,   -35,   -48,   -31,   -15,   -16,   -17,
   -18,   -19,   -20,   -48,   -23,   -25,    -7,    -9,   -10,   -13,
   -12,   -48,   -48,   -30,   -48,   -28,   -48,   -48,   -33,   -48,
   -48,   -26,   -21,   -24,   -48,   -48,   -48,   -48,   -48,   -48,
   -48,   -22,   -48,   -36,   -48,   -48,   -32,   -34 ]

racc_goto_table = [
     7,    65,    20,    74,    17,    63,    19,    67,    68,    69,
    70,    26,    20,    32,    84,    72,    19,    57,    58,    59,
    60,    61,    62,    83,     6,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,    81,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    79,   nil,    20,   nil,    82,   nil,    19,   nil,
    86,    20,   nil,    20,    88,    19,    91,    19 ]

racc_goto_check = [
     2,     8,    19,    13,     2,     9,    18,     3,     3,     5,
     5,     4,    19,     4,    15,    17,    18,     6,     6,     6,
     6,     6,     6,     7,     1,   nil,     4,   nil,   nil,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,    19,   nil,     4,   nil,    18,   nil,
     2,    19,   nil,    19,     2,    18,     4,    18 ]

racc_goto_pointer = [
   nil,    24,     0,   -39,    -1,   -39,   -21,   -54,   -43,   -39,
   nil,   nil,   nil,   -53,   nil,   -64,   nil,   -39,    -1,    -5 ]

racc_goto_default = [
   nil,   nil,   nil,    24,   nil,    28,    29,   nil,   nil,   nil,
     1,     4,     5,   nil,     8,   nil,     9,   nil,    10,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 36, :_reduce_none,
  0, 36, :_reduce_2,
  1, 38, :_reduce_3,
  1, 38, :_reduce_4,
  1, 38, :_reduce_5,
  1, 38, :_reduce_6,
  3, 38, :_reduce_7,
  1, 40, :_reduce_none,
  3, 40, :_reduce_9,
  3, 40, :_reduce_10,
  1, 41, :_reduce_none,
  3, 41, :_reduce_12,
  3, 41, :_reduce_13,
  1, 39, :_reduce_none,
  3, 39, :_reduce_15,
  3, 39, :_reduce_16,
  3, 39, :_reduce_17,
  3, 39, :_reduce_18,
  3, 39, :_reduce_19,
  3, 39, :_reduce_20,
  1, 42, :_reduce_21,
  3, 42, :_reduce_22,
  1, 43, :_reduce_23,
  3, 43, :_reduce_24,
  1, 44, :_reduce_25,
  3, 44, :_reduce_26,
  3, 45, :_reduce_27,
  5, 45, :_reduce_28,
  4, 46, :_reduce_29,
  5, 47, :_reduce_30,
  0, 48, :_reduce_31,
  10, 47, :_reduce_32,
  0, 50, :_reduce_33,
  11, 49, :_reduce_34,
  0, 52, :_reduce_35,
  9, 51, :_reduce_36,
  4, 53, :_reduce_37,
  4, 53, :_reduce_38,
  1, 54, :_reduce_39,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  1, 37, :_reduce_44,
  2, 37, :_reduce_45,
  1, 37, :_reduce_46,
  2, 37, :_reduce_47 ]

racc_reduce_n = 48

racc_shift_n = 98

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :INTEGER => 3,
  :REAL => 4,
  :STRING => 5,
  "(" => 6,
  ")" => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  :OP_EQ => 12,
  :OP_NEQ => 13,
  :OP_LEQ => 14,
  :OP_GEQ => 15,
  ">" => 16,
  "<" => 17,
  "," => 18,
  ":" => 19,
  "|" => 20,
  :VAR_OPEN => 21,
  :VAR_CLOSE => 22,
  :STMT_OPEN => 23,
  :IF => 24,
  :STMT_CLOSE => 25,
  :ENDIF => 26,
  :ELSE => 27,
  :FOR => 28,
  :IN => 29,
  :ENDFOR => 30,
  :BLOCK => 31,
  :ENDBLOCK => 32,
  :EXTENDS => 33,
  :TEXT_BLOCK => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "INTEGER",
  "REAL",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "OP_EQ",
  "OP_NEQ",
  "OP_LEQ",
  "OP_GEQ",
  "\">\"",
  "\"<\"",
  "\",\"",
  "\":\"",
  "\"|\"",
  "VAR_OPEN",
  "VAR_CLOSE",
  "STMT_OPEN",
  "IF",
  "STMT_CLOSE",
  "ENDIF",
  "ELSE",
  "FOR",
  "IN",
  "ENDFOR",
  "BLOCK",
  "ENDBLOCK",
  "EXTENDS",
  "TEXT_BLOCK",
  "$start",
  "target",
  "document",
  "primary_expression",
  "boolean_expression",
  "multiplicative_expression",
  "additive_expression",
  "parameter_list",
  "filter",
  "filter_list",
  "inject_statement",
  "if_statement",
  "if_block",
  "@1",
  "for_block",
  "@2",
  "block_block",
  "@3",
  "extends_statement",
  "document_component" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cadenza.y', 5)
  def _reduce_2(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 9)
  def _reduce_3(val, _values, result)
     result = VariableNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 10)
  def _reduce_4(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 11)
  def _reduce_5(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 12)
  def _reduce_6(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 13)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'cadenza.y', 18)
  def _reduce_9(val, _values, result)
     result = ArithmeticNode.new(val[0], "*", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 19)
  def _reduce_10(val, _values, result)
     result = ArithmeticNode.new(val[0], "/", val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'cadenza.y', 24)
  def _reduce_12(val, _values, result)
     result = ArithmeticNode.new(val[0], "+", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 25)
  def _reduce_13(val, _values, result)
     result = ArithmeticNode.new(val[0], "-", val[2]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'cadenza.y', 30)
  def _reduce_15(val, _values, result)
     result = BooleanNode.new(val[0], "==", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 31)
  def _reduce_16(val, _values, result)
     result = BooleanNode.new(val[0], "!=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 32)
  def _reduce_17(val, _values, result)
     result = BooleanNode.new(val[0], "<=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 33)
  def _reduce_18(val, _values, result)
     result = BooleanNode.new(val[0], ">=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 34)
  def _reduce_19(val, _values, result)
     result = BooleanNode.new(val[0], ">", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 35)
  def _reduce_20(val, _values, result)
     result = BooleanNode.new(val[0], "<", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 39)
  def _reduce_21(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 40)
  def _reduce_22(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 44)
  def _reduce_23(val, _values, result)
     result = FilterNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 45)
  def _reduce_24(val, _values, result)
     result = FilterNode.new(val[0].value, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 49)
  def _reduce_25(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 50)
  def _reduce_26(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 54)
  def _reduce_27(val, _values, result)
     result = InjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 55)
  def _reduce_28(val, _values, result)
     result = InjectNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 61)
  def _reduce_29(val, _values, result)
            @stack.push DocumentNode.new
        result = val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 69)
  def _reduce_30(val, _values, result)
            result = IfNode.new(val[0], @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 72)
  def _reduce_31(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 75)
  def _reduce_32(val, _values, result)
            false_children, true_children = @stack.pop.children, @stack.pop.children
        result = IfNode.new(val[0], true_children, false_children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 82)
  def _reduce_33(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 86)
  def _reduce_34(val, _values, result)
            iterator = VariableNode.new(val[2].value)
        iterable = VariableNode.new(val[4].value)
        
        result = ForNode.new(iterator, iterable, @stack.pop.children)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 95)
  def _reduce_35(val, _values, result)
     @stack.push DocumentNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 98)
  def _reduce_36(val, _values, result)
     result = BlockNode.new(val[2].value, @stack.pop.children) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 102)
  def _reduce_37(val, _values, result)
     result = val[2].value 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 103)
  def _reduce_38(val, _values, result)
     result = VariableNode.new(val[2].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 107)
  def _reduce_39(val, _values, result)
     result = TextNode.new(val[0].value) 
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'cadenza.y', 115)
  def _reduce_44(val, _values, result)
     push_child val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 116)
  def _reduce_45(val, _values, result)
     push_child val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 117)
  def _reduce_46(val, _values, result)
     @stack.first.extends = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 118)
  def _reduce_47(val, _values, result)
     @stack.first.extends = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Cadenza
