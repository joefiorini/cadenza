#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

# parser.rb : generated by racc
  
module Cadenza
  class Parser < Racc::Parser

module_eval(<<'...end cadenza.y/module_eval...', 'cadenza.y', 73)
attr_reader :lexer

def initialize(options={})
  @lexer = options.fetch(:lexer, Cadenza::Lexer.new)

  raise "Lexers passed to the parser must define next_token" unless @lexer.respond_to?(:next_token)

  raise "Lexers passed to the parser must define source=" unless @lexer.respond_to?(:source=)
end

def parse(source)
  @lexer.source = source
  @document = DocumentNode.new
  do_parse
  @document
end

def next_token
  @lexer.next_token
end
...end cadenza.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    41,     6,     6,     2,     2,    20,    21,    22,    23,    24,
    25,    20,    21,    22,    23,    24,    25,    39,    47,    26,
    46,    19,    20,    21,    22,    23,    24,    25,    20,    21,
    22,    23,    24,    25,     9,    10,    11,    13,    15,     9,
    10,    11,    13,    15,     9,    10,    11,    13,    15,     9,
    10,    11,    13,    15,     9,    10,    11,    13,    15,     9,
    10,    11,    13,    15,     9,    10,    11,    13,    15,     9,
    10,    11,    13,    15,     9,    10,    11,    13,    15,     9,
    10,    11,    13,    15,     9,    10,    11,    13,    15,     9,
    10,    11,    13,    15,     9,    10,    11,    13,    15,     9,
    10,    11,    13,    15,    31,    30,    31,    30,    31,    30,
    31,    30,    31,    30,    31,    30,    28,    29,    31,    30,
    28,    29,    28,    29,    18,    48,    52,     7,    39 ]

racc_action_check = [
    27,     0,     5,     0,     5,    27,    27,    27,    27,    27,
    27,    14,    14,    14,    14,    14,    14,    47,    38,    14,
    38,    14,    50,    50,    50,    50,    50,    50,    53,    53,
    53,    53,    53,    53,    48,    48,    48,    48,    48,     6,
     6,     6,     6,     6,    15,    15,    15,    15,    15,    31,
    31,    31,    31,    31,    52,    52,    52,    52,    52,    20,
    20,    20,    20,    20,    21,    21,    21,    21,    21,    22,
    22,    22,    22,    22,    23,    23,    23,    23,    23,    24,
    24,    24,    24,    24,    25,    25,    25,    25,    25,    28,
    28,    28,    28,    28,    30,    30,    30,    30,    30,    29,
    29,    29,    29,    29,    32,    32,    33,    33,    34,    34,
    35,    35,    36,    36,    37,    37,    16,    16,    17,    17,
    45,    45,    44,    44,     7,    39,    51,     4,    26 ]

racc_action_pointer = [
   -20,   nil,   nil,   nil,   127,   -19,    37,   124,   nil,   nil,
   nil,   nil,   nil,   nil,    -1,    42,   108,   108,   nil,   nil,
    57,    62,    67,    72,    77,    82,   126,    -7,    87,    97,
    92,    47,    94,    96,    98,   100,   102,   104,    -2,   106,
   nil,   nil,   nil,   nil,   114,   112,   nil,    15,    32,   nil,
    10,   108,    52,    16 ]

racc_action_default = [
    -2,   -30,   -29,   -31,   -33,    -1,   -33,   -33,   -32,    -3,
    -4,    -5,    -8,    -6,   -33,   -33,   -11,   -14,    54,   -27,
   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,   -33,
   -33,   -33,   -15,   -16,   -17,   -18,   -19,   -20,   -33,   -23,
   -25,    -7,    -9,   -10,   -13,   -12,   -28,   -33,   -33,   -26,
   -21,   -24,   -33,   -22 ]

racc_goto_table = [
    14,    40,     3,    44,    45,    42,    43,     8,     5,    27,
    32,    33,    34,    35,    36,    37,    51,    38,     4,   nil,
   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,   nil,   nil,   nil,    53 ]

racc_goto_check = [
     4,     8,    11,     5,     5,     3,     3,    11,     2,     4,
     6,     6,     6,     6,     6,     6,     7,     9,     1,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    18,     8,   -23,    -6,   -27,   -10,   -32,   -25,    -9,
   nil,     2 ]

racc_goto_default = [
   nil,   nil,   nil,    12,   nil,    16,    17,   nil,   nil,   nil,
     1,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 25, :_reduce_none,
  0, 25, :_reduce_2,
  1, 27, :_reduce_3,
  1, 27, :_reduce_4,
  1, 27, :_reduce_5,
  1, 27, :_reduce_6,
  3, 27, :_reduce_7,
  1, 29, :_reduce_none,
  3, 29, :_reduce_9,
  3, 29, :_reduce_10,
  1, 30, :_reduce_none,
  3, 30, :_reduce_12,
  3, 30, :_reduce_13,
  1, 28, :_reduce_none,
  3, 28, :_reduce_15,
  3, 28, :_reduce_16,
  3, 28, :_reduce_17,
  3, 28, :_reduce_18,
  3, 28, :_reduce_19,
  3, 28, :_reduce_20,
  1, 31, :_reduce_21,
  3, 31, :_reduce_22,
  1, 32, :_reduce_23,
  3, 32, :_reduce_24,
  1, 33, :_reduce_25,
  3, 33, :_reduce_26,
  3, 34, :_reduce_27,
  5, 34, :_reduce_28,
  1, 35, :_reduce_29,
  1, 35, :_reduce_none,
  1, 26, :_reduce_31,
  2, 26, :_reduce_32 ]

racc_reduce_n = 33

racc_shift_n = 54

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :INTEGER => 3,
  :REAL => 4,
  :STRING => 5,
  "(" => 6,
  ")" => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  :OP_EQ => 12,
  :OP_NEQ => 13,
  :OP_LEQ => 14,
  :OP_GEQ => 15,
  ">" => 16,
  "<" => 17,
  "," => 18,
  ":" => 19,
  "|" => 20,
  :VAR_OPEN => 21,
  :VAR_CLOSE => 22,
  :TEXT_BLOCK => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "INTEGER",
  "REAL",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "OP_EQ",
  "OP_NEQ",
  "OP_LEQ",
  "OP_GEQ",
  "\">\"",
  "\"<\"",
  "\",\"",
  "\":\"",
  "\"|\"",
  "VAR_OPEN",
  "VAR_CLOSE",
  "TEXT_BLOCK",
  "$start",
  "target",
  "document",
  "primary_expression",
  "boolean_expression",
  "multiplicative_expression",
  "additive_expression",
  "parameter_list",
  "filter",
  "filter_list",
  "inject_statement",
  "document_component" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'cadenza.y', 5)
  def _reduce_2(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 9)
  def _reduce_3(val, _values, result)
     result = VariableNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 10)
  def _reduce_4(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 11)
  def _reduce_5(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 12)
  def _reduce_6(val, _values, result)
     result = ConstantNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 13)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'cadenza.y', 18)
  def _reduce_9(val, _values, result)
     result = ArithmeticNode.new(val[0], "*", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 19)
  def _reduce_10(val, _values, result)
     result = ArithmeticNode.new(val[0], "/", val[2]) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'cadenza.y', 24)
  def _reduce_12(val, _values, result)
     result = ArithmeticNode.new(val[0], "+", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 25)
  def _reduce_13(val, _values, result)
     result = ArithmeticNode.new(val[0], "-", val[2]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'cadenza.y', 30)
  def _reduce_15(val, _values, result)
     result = BooleanNode.new(val[0], "==", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 31)
  def _reduce_16(val, _values, result)
     result = BooleanNode.new(val[0], "!=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 32)
  def _reduce_17(val, _values, result)
     result = BooleanNode.new(val[0], "<=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 33)
  def _reduce_18(val, _values, result)
     result = BooleanNode.new(val[0], ">=", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 34)
  def _reduce_19(val, _values, result)
     result = BooleanNode.new(val[0], ">", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 35)
  def _reduce_20(val, _values, result)
     result = BooleanNode.new(val[0], "<", val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 39)
  def _reduce_21(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 40)
  def _reduce_22(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 44)
  def _reduce_23(val, _values, result)
     result = FilterNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 45)
  def _reduce_24(val, _values, result)
     result = FilterNode.new(val[0].value, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 49)
  def _reduce_25(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 50)
  def _reduce_26(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 54)
  def _reduce_27(val, _values, result)
     result = InjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 55)
  def _reduce_28(val, _values, result)
     result = InjectNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 59)
  def _reduce_29(val, _values, result)
     result = TextNode.new(val[0].value) 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'cadenza.y', 64)
  def _reduce_31(val, _values, result)
     @document.children.push(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cadenza.y', 65)
  def _reduce_32(val, _values, result)
     @document.children.push(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Cadenza
